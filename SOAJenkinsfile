pipeline {
    agent {
        kubernetes {
            label 'fmwk8s-test-infra-slave'
            namespace 'fmwk8s'
            inheritFrom 'fmwk8s-test-infra-slave'
        }
    }

    environment {
        KUBECONFIG = credentials('admin.fmwk8s.kubeconfig')
        SOA_OPERATOR_NS = 'sczachar-soa-operator-ns'
        SOA_OPERATOR_SA = 'soa-operator-sa'
        SOA_DOMAIN_NAME = 'soainfra'
        SOA_DOMAIN_NS = 'sczachar-soainfra'
    }

    stages {
        stage('build and deploy soa operator') {
            steps {
                withCredentials([[$class          : 'UsernamePasswordMultiBinding', credentialsId: 'DockerHub',
                                  usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'],
                                 [$class          : 'UsernamePasswordMultiBinding', credentialsId: 'sandeep.zachariah.docker',
                                  usernameVariable: 'DOCKER_USERNAME_CISYSTEM', passwordVariable: 'DOCKER_PASSWORD_CISYSTEM']]) {
                    container('dind') {
                        git branch: 'master',
                                credentialsId: 'sandeep.zachariah.ssh',
                                url: 'git@orahub.oraclecorp.com:tooling/soa-kubernetes-operator.git'

                        sh label: 'setup env', script: '''
                        export KUBECONFIG=${KUBECONFIG}
                        #kubectl create ns ${SOA_OPERATOR_NS}
                        #kubectl create sa ${SOA_OPERATOR_SA} -n ${SOA_OPERATOR_NS} 
                        helm init
                        '''

                        sh label: 'build soa operator image', script: '''
                        ls										
                        #docker login http://container-registry.oracle.com -u ${DOCKER_USERNAME_CISYSTEM} -p ${DOCKER_PASSWORD_CISYSTEM}
						
						#docker pull container-registry.oracle.com/java/serverjre:latest
						#docker tag container-registry.oracle.com/java/serverjre:latest store/oracle/serverjre:8
						
						#docker pull fmw-cert-docker.dockerhub-den.oraclecorp.com/soaoperatorpoc/weblogic-kubernetes-operator:2.1
						#docker tag fmw-cert-docker.dockerhub-den.oraclecorp.com/soaoperatorpoc/weblogic-kubernetes-operator:2.1 weblogic-kubernetes-operator:2.1
						

						#docker build --build-arg https_proxy=$https_proxy -t soa-kubernetes-operator:2.1 --no-cache=true .
						'''

                        sh label: 'push soa operator image', script: '''
						#docker tag soa-kubernetes-operator:2.1 cisystem.docker.oraclecorp.com/soa-kubernetes-operator:2.1
						#docker login cisystem.docker.oraclecorp.com -u ${DOCKER_USERNAME_CISYSTEM} -p ${DOCKER_PASSWORD_CISYSTEM}
						#docker push cisystem.docker.oraclecorp.com/soa-kubernetes-operator:2.1
                        '''

                        sh label: 'deploy soa operator', script: '''
						retVal=`echo \\`helm ls soa-kubernetes-operator\\``

						if [[ !  -z  "$retVal" ]]; then
						    helm upgrade \
						        --reuse-values \
						        --set "domainNamespaces={$SOA_DOMAIN_NS}" \
						        --wait \
						        soa-kubernetes-operator \
						        kubernetes/charts/soa-kubernetes-operator
						else
							helm install kubernetes/charts/soa-kubernetes-operator \
								--name soa-kubernetes-operator \
								--set image=cisystem.docker.oraclecorp.com/soa-kubernetes-operator:2.1 \
								--namespace ${SOA_OPERATOR_NS} \
								--set serviceAccount=${SOA_OPERATOR_SA} \
								--set "domainNamespaces={}" \
								--wait
						fi
						'''

                        sh label: 'verify soa operator', script: '''
						kubectl get pods -n ${SOA_OPERATOR_NS}
						kubectl logs -n ${SOA_OPERATOR_NS} -c weblogic-operator deployments/weblogic-operator
						'''
                    }
                }
            }
        }

        stage('deploy soa domain in pv') {
            steps {
                withCredentials([[$class          : 'UsernamePasswordMultiBinding', credentialsId: 'DockerHub',
                                  usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'],
                                 [$class          : 'UsernamePasswordMultiBinding', credentialsId: 'sandeep.zachariah.docker',
                                  usernameVariable: 'DOCKER_USERNAME_CISYSTEM', passwordVariable: 'DOCKER_PASSWORD_CISYSTEM']]) {
                    container('dind') {
                        git branch: 'master',
                                url: 'https://github.com/oracle/weblogic-kubernetes-operator'

                        sh label: 'setup env', script: '''
                        export KUBECONFIG=${KUBECONFIG}
                        kubectl create ns ${SOA_DOMAIN_NS}
                        '''

                        sh label: 'upgrade helm', script: '''
                        helm upgrade \
                            --reuse-values \
                            --set "domainNamespaces={$SOA_DOMAIN_NS}" \
                            --wait \
                            soa-kubernetes-operator \
                            kubernetes/charts/soa-kubernetes-operator
                        '''

                        sh label: 'configure domain secrets', script: '''
                         retVal=`echo \\`kubectl get secret ${SOA_DOMAIN_NAME}-domain-credentials -n ${SOA_DOMAIN_NS}\\``
                         if [[ "$retVal" == *"not found"* ]]; then
                            kubernetes/samples/scripts/create-domain-credentials.sh -u weblogic -p Welcome1 -n ${SOA_DOMAIN_NS} -d ${SOA_DOMAIN_NAME} -s ${SOA_DOMAIN_NAME}-domain-credentials
                         fi
                        '''

                        sh label: 'prepare persistent volume', script: '''
                        cd kubernetes/samples/scripts/create-soa-domain-pv-pvc
                        cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig
                        cat create-pv-pvc-inputs.yaml

						sed -i "s#baseName: weblogic-sample#baseName: ${SOA_DOMAIN_NAME}#g" create-pv-pvc-inputs.yaml
                        '''


                        sh label: 'setup db', script: '''
                        '''

                        sh label: 'create domain in pv', script: '''
                        '''
                    }
                }
            }
        }

        stage('deploy test tools') {
            steps {
                sh label: 'setup env', script: '''
                '''

                sh label: 'deploy selenium', script: '''
                '''
            }
        }

        stage('run tests') {
            parallel {
                stage('verify soa ready') {
                    steps {
                        sh label: 'setup env', script: '''
                        '''
                    }
                }

                stage('execute tests') {
                    steps {
                        sh label: 'setup env vars', script: '''
                        '''

                        sh label: 'run test', script: '''
                        '''

                        sh label: 'publish results', script: '''
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            container(name: 'jnlp') {
                sh label: 'clean soa domain', script: '''
                echo cleanup
                '''
            }
        }
    }
}
