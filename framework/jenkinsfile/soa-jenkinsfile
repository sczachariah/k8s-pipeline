@Library('fmwk8s-pipeline-library') _


import com.oracle.fmwk8s.common.Common
import com.oracle.fmwk8s.common.EnvironmentSetup
import com.oracle.fmwk8s.env.Domain
import com.oracle.fmwk8s.env.Operator

pipeline {
    agent {
        kubernetes {
            label 'fmwk8s-test-mats-slave'
            namespace 'fmwk8s'
            inheritFrom 'fmwk8s-test-mats-slave'
        }
    }

    environment {
        RUN_SUFFIX = Common.getUniqueId(this)
        KUBECONFIG = credentials('admin.fmwk8s.kubeconfig')
        SOA_OPERATOR_NS = 'soa-operator-ns' + "-${RUN_SUFFIX}"
        SOA_OPERATOR_SA = 'default'
        SOA_OPERATOR_REL = "${RUN_SUFFIX}"
        SOA_DOMAIN_NAME = 'soainfra'
        SOA_DOMAIN_NS = 'soa-domain-ns' + "-${RUN_SUFFIX}"
        FMWK8S_NFS_HOME = "/scratch/u01/DockerVolume"
        NFS_DOMAIN_DIR = "${SOA_DOMAIN_NS}"
        NFS_DOMAIN_PATH = "${FMWK8S_NFS_HOME}/${NFS_DOMAIN_DIR}"
        REGISTRY_AUTH = credentials("sandeep.zachariah.docker")
    }


    stages {
        stage('build and deploy soa operator') {
            steps {
                log('INFO', 'Starting soa pipeline with unique runId ' + "${RUN_SUFFIX}")

                withCredentials([[$class          : 'UsernamePasswordMultiBinding', credentialsId: 'DockerHub',
                                  usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'],
                                 [$class          : 'UsernamePasswordMultiBinding', credentialsId: 'sandeep.zachariah.docker',
                                  usernameVariable: 'DOCKER_USERNAME_CISYSTEM', passwordVariable: 'DOCKER_PASSWORD_CISYSTEM']]) {
                    container('dind') {
                        git branch: 'master',
                                credentialsId: 'sandeep.zachariah.ssh',
                                url: 'git@orahub.oraclecorp.com:tooling/soa-kubernetes-operator.git'
                        script {
                            Operator.createNamespace this, "${SOA_OPERATOR_NS}"
                            Domain.createNamespace this, "${SOA_DOMAIN_NS}"
                            Operator.buildOperator this, "${REGISTRY_AUTH_USR}", "${REGISTRY_AUTH_PSW}", "${https_proxy}"
                            Operator.deployOperator this, "${SOA_OPERATOR_REL}", "${SOA_DOMAIN_NS}","${SOA_OPERATOR_NS}","${SOA_OPERATOR_SA}"
                            Operator.verifyOperator this, "${SOA_OPERATOR_NS}"
                        }
                    }

                    container('jnlp') {
                        script {
                            EnvironmentSetup.createNfsFolder this, "${SOA_DOMAIN_NS}", "${FMWK8S_NFS_HOME}", "${NFS_DOMAIN_DIR}"
                        }
                    }
                }
            }
        }

        stage('prepare soa environment') {
            parallel {
                stage('setup database') {
                    steps {
                        container('jnlp') {
                            script {
                                Database.deployDatabase this, "${SOA_DOMAIN_NS}", "${REGISTRY_AUTH_USR}", "${REGISTRY_AUTH_PSW}"
                            }
                        }
                    }
                }

                stage('prepare soa domain in pv') {
                    steps {
                        withCredentials([[$class          : 'UsernamePasswordMultiBinding', credentialsId: 'DockerHub',
                                          usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'],
                                         [$class          : 'UsernamePasswordMultiBinding', credentialsId: 'sandeep.zachariah.docker',
                                          usernameVariable: 'DOCKER_USERNAME_CISYSTEM', passwordVariable: 'DOCKER_PASSWORD_CISYSTEM']]) {
                            container('jnlp') {
                                sh label: 'setup env', script: '''
                                export KUBECONFIG=${KUBECONFIG}
                                sleep 120
                                '''

                                sh label: 'upgrade helm', script: '''
                                helm upgrade \
                                    --reuse-values \
                                    --set "domainNamespaces={$SOA_DOMAIN_NS}" \
                                    --wait \
                                    ${SOA_OPERATOR_REL} \
                                    kubernetes/charts/soa-kubernetes-operator
                                '''


                                sh label: 'configure domain secrets', script: '''
                                retVal=`echo \\`kubectl get secret ${SOA_DOMAIN_NAME}-weblogic-credentials -n ${SOA_DOMAIN_NS} 2>&1\\``
                                if echo "$retVal" | grep -q "not found"; then
                                    kubernetes/samples/scripts/create-soa-domain-credentials/create-domain-credentials.sh -u weblogic -p Welcome1 -n ${SOA_DOMAIN_NS} -d ${SOA_DOMAIN_NAME}
                                fi
                                '''

                                sh label: 'prepare persistent volume', script: '''
                                cd kubernetes/samples/scripts/create-soa-domain-pv-pvc
                                cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig

						        sed -i "s#baseName: domain#baseName: ${SOA_DOMAIN_NS}#g" create-pv-pvc-inputs.yaml
						        sed -i "s#domainUID: soainfra#domainUID: ${SOA_DOMAIN_NAME}#g" create-pv-pvc-inputs.yaml
						        sed -i "s#namespace: soans#namespace: ${SOA_DOMAIN_NS}#g" create-pv-pvc-inputs.yaml
						        sed -i "s#weblogicDomainStoragePath: /scratch/DockerVolume/SOA#weblogicDomainStoragePath: ${NFS_DOMAIN_PATH}#g" create-pv-pvc-inputs.yaml
						        sed -i "s#weblogicDomainStorageReclaimPolicy: Retain#weblogicDomainStorageReclaimPolicy: Recycle#g" create-pv-pvc-inputs.yaml
                                cat create-pv-pvc-inputs.yaml
                        
                                ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o ${WORKSPACE}/soa-operator-output-directory

                                cp ${WORKSPACE}/soa-operator-output-directory/pv-pvcs/${SOA_DOMAIN_NAME}-${SOA_DOMAIN_NS}-pv.yaml ${WORKSPACE}
						        cp ${WORKSPACE}/soa-operator-output-directory/pv-pvcs/${SOA_DOMAIN_NAME}-${SOA_DOMAIN_NS}-pvc.yaml ${WORKSPACE}
                                cat ${WORKSPACE}/${SOA_DOMAIN_NAME}-${SOA_DOMAIN_NS}-pv.yaml
						        cat ${WORKSPACE}/${SOA_DOMAIN_NAME}-${SOA_DOMAIN_NS}-pvc.yaml

                                kubectl apply -f ${WORKSPACE}/${SOA_DOMAIN_NAME}-${SOA_DOMAIN_NS}-pv.yaml -n ${SOA_DOMAIN_NS}
						        kubectl apply -f ${WORKSPACE}/${SOA_DOMAIN_NAME}-${SOA_DOMAIN_NS}-pvc.yaml -n ${SOA_DOMAIN_NS}

                                kubectl describe pv ${SOA_DOMAIN_NAME}-${SOA_DOMAIN_NS}-pv -n ${SOA_DOMAIN_NS}
                                kubectl describe pvc ${SOA_DOMAIN_NAME}-${SOA_DOMAIN_NS}-pvc -n ${SOA_DOMAIN_NS}
                                '''

                                sh label: 'prepare domain in pv', script: '''
                                cd kubernetes/samples/scripts/create-soa-domain/domain-home-on-pv/multiple-Managed-servers
                                cp create-domain-inputs.yaml create-domain-inputs.yaml.orig
                                cp create-domain-job-template.yaml create-domain-job-template.yaml.orig
                        
                                sed -i "s#domainUID: soainfra#domainUID: ${SOA_DOMAIN_NAME}#g" create-domain-inputs.yaml
                                sed -i "s#domainHome: /u01/oracle/user_projects/domains/soainfra#domainHome: /u01/oracle/user_projects/domains/${SOA_DOMAIN_NAME}#g" create-domain-inputs.yaml
                                sed -i "s#weblogicCredentialsSecretName: soainfra-domain-credentials#weblogicCredentialsSecretName: ${SOA_DOMAIN_NAME}-weblogic-credentials#g" create-domain-inputs.yaml
                                sed -i "s#image: oracle/soa:12.2.1.3#image: container-registry.oracle.com/middleware/soasuite:12.2.1.3#g" create-domain-inputs.yaml
                                sed -i "s/#imagePullSecretName:/imagePullSecretName: regcred/g" create-domain-inputs.yaml
                                sed -i "s#logHome: /u01/oracle/user_projects/domains/logs/soainfra#logHome: /u01/oracle/user_projects/domains/logs/${SOA_DOMAIN_NAME}#g" create-domain-inputs.yaml
                                #sed -i "s#exposeAdminT3Channel: false#exposeAdminT3Channel: true#g" create-domain-inputs.yaml
                                #sed -i "s/#t3PublicAddress:/t3PublicAddress: fmwk8s.us.oracle.com/g" create-domain-inputs.yaml
                                sed -i "s#namespace: soans#namespace: ${SOA_DOMAIN_NS}#g" create-domain-inputs.yaml
                                sed -i "s#persistentVolumeClaimName: soainfra-domain-pvc#persistentVolumeClaimName: ${SOA_DOMAIN_NAME}-${SOA_DOMAIN_NS}-pvc#g" create-domain-inputs.yaml
                                sed -i "s#initialManagedServerReplicas: 2#initialManagedServerReplicas: 1#g" create-domain-inputs.yaml
                                cat create-domain-inputs.yaml
                                
                                sed -i "s#soadb:1521#soadb.${SOA_DOMAIN_NS}:1521#g" create-domain-job-template.yaml
                                cat create-domain-job-template.yaml
                                '''
                            }
                        }
                    }
                }
            }
        }

        stage('deploy soa domain') {
            steps {
                sh label: 'create domain in pv', script: '''
                cd kubernetes/samples/scripts/create-soa-domain/domain-home-on-pv/multiple-Managed-servers
                ./create-domain.sh -i create-domain-inputs.yaml -o ${WORKSPACE}/soa-operator-output-directory
                
                cp ${WORKSPACE}/soa-operator-output-directory/soa-domains/${SOA_DOMAIN_NAME}/domain.yaml ${WORKSPACE}
                cat ${WORKSPACE}/domain.yaml
                '''

                sh label: 'start domain', script: '''
                kubectl apply -f ${WORKSPACE}/domain.yaml
                sleep 360
                
                kubectl get all,domains -n ${SOA_DOMAIN_NS}
                #kubectl logs ${SOA_DOMAIN_NAME}-adminserver -n ${SOA_DOMAIN_NS}
                '''
            }
        }

        stage('deploy test tools') {
            steps {
                sh label: 'setup env', script: '''
                '''

                sh label: 'deploy selenium', script: '''
                '''
            }
        }

        stage('run tests') {
            parallel {
                stage('verify soa ready') {
                    steps {
                        sh label: 'setup env', script: '''
                        '''
                    }
                }

                stage('execute tests') {
                    steps {
                        sh label: 'setup env vars', script: '''
                        '''

                        sh label: 'run test', script: '''
                        '''

                        sh label: 'publish results', script: '''
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            container(name: 'jnlp') {
                script {
                    Operator.cleanOperator this, "${SOA_OPERATOR_REL}"

                    Domain.cleanDomain this, "${SOA_DOMAIN_NAME}", "${SOA_DOMAIN_NS}"
                    Domain.cleanDomainNamespace this, "${SOA_DOMAIN_NS}"

                    Operator.cleanOperator this, "${SOA_OPERATOR_REL}"
                    Operator.cleanOperatorNamespace this, "${SOA_OPERATOR_NS}"
                }
            }
        }
    }
}
