@Library('fmwk8s-pipeline-library') _


import com.oracle.fmwk8s.common.Common
import com.oracle.fmwk8s.common.EnvironmentSetup
import com.oracle.fmwk8s.common.Initializer
import com.oracle.fmwk8s.common.Validation
import com.oracle.fmwk8s.env.*
import com.oracle.fmwk8s.test.Test
import com.oracle.fmwk8s.utility.FrameworkStatus

pipeline {
    agent {
        kubernetes {
            cloud "${CLOUD}"
            namespace 'fmwk8s'
            yamlFile 'framework/podtemplate/fmwk8s-slave.yaml'
        }
    }

    environment {
        REGISTRY_AUTH = credentials("fmwk8sval_ww.docker")
    }

    stages {
        stage('initialize validation framework') {
            steps {
                script {
                    currentBuild.displayName = this.env.BUILD_NUMBER + "-" + this.env.OPERATOR_VERSION + "-" + this.env.PRODUCT_NAME + "-" + "${this.env.DOMAIN_TYPE}".toString().toUpperCase()
                    Initializer.initialize(this)
                }
            }
        }

        stage('validate input parameters') {
            steps {
                script {
                    Validation.validateInputs()
                    sleep 1
                }
            }
        }

        stage('deploy kubernetes operator') {
            steps {
                dir('weblogic-operator') {
                    script {
                        Operator.deployOperator()
                    }
                }
                dir('fmwk8s') {
                    script {
                        Common.createCommonK8SResources()
                    }
                }
            }
        }

        stage('configure domain loadbalancer') {
            steps {
                dir('fmwk8s') {
                    script {
                        IngressController.deployLoadBalancer()
                    }
                }
                dir('fmwk8s') {
                    script {
                        Domain.configureDomainLoadBalancer()
                    }
                }
            }
        }

        stage('prepare fmw product environment') {
            parallel {
                stage('setup database') {
                    steps {
                        dir('fmwk8s') {
                            script {
                                Database.deployDatabase()
                                Domain.preparRcu()
                            }
                        }
                    }
                }
                stage('prepare fmw domain in pv') {
                    steps {
                        dir('fmwsamples') {
                            script {
                                Domain.pullSampleScripts()
                                Domain.configureDomainSecret()
                                Domain.configureRcuSecret()
                                Domain.preparePersistentVolume()
                                Domain.prepareDomain()
                            }
                        }
                    }

                }
            }
        }

        stage('deploy fmw domain') {
            parallel {
                stage('create fmw domain') {
                    steps {
                        dir('fmwsamples') {
                            script {
                                Domain.createDomain()
                            }
                        }
                    }
                }
                stage('deploy logstash') {
                    steps {
                        dir('fmwk8s') {
                            script {
                                Logging.deployLogstash()
                            }
                        }
                    }
                }
            }
        }

        stage('verify domain ready') {
            steps {
                sh label: 'verify weblogic ready', script: '''
                            echo "TODO WEBLOGIC READY"
                            '''
            }
        }

        stage('run tests') {
            parallel {
                stage('wait for completion') {
                    steps {
                        script {
                            EnvironmentSetup.waitHoursAfter()
                        }
                    }
                }

                stage('execute tests') {
                    steps {
                        /* container('dind'){
                            script {
                                Test.dockerInspectTestImageAndCreateWrapperDockerEntryPointScript()
                            }
                        } */
                        script {
                            Test.invokeTest()
                        }
                    }
                }
            }
        }

        stage('publish results') {
            steps {
                script {
                    sleep 1
                }
            }
        }
    }

    post {
        always {
            script {
                Logging.getLogs()
                FrameworkStatus.getFrameworkStatusJson(this)

                Operator.cleanOperator()
                Test.cleanup()
                IngressController.undeployLoadBalancer()
                Domain.cleanDomain()
                EnvironmentSetup.deleteNfsFolder()
                Domain.cleanDomainNamespace()
                Operator.cleanOperator()
                Operator.cleanOperatorNamespace()

                FrameworkStatus.getFrameworkStatusJson(this)
            }
        }
    }
}
