@Library('fmwk8s-pipeline-library') _


import com.oracle.fmwk8s.common.Common
import com.oracle.fmwk8s.common.EnvironmentSetup
import com.oracle.fmwk8s.common.Validation
import com.oracle.fmwk8s.env.Database
import com.oracle.fmwk8s.env.Domain
import com.oracle.fmwk8s.env.IngressController
import com.oracle.fmwk8s.env.Operator


pipeline {
    agent {
        kubernetes {
            label 'fmwk8s-test-mats-slave'
            namespace 'fmwk8s'
            inheritFrom 'fmwk8s-test-mats-slave'
        }
    }

    environment {
        RUN_SUFFIX = Common.getUniqueId(this, "${PRODUCT}")
        KUBECONFIG = credentials('admin.fmwk8s.kubeconfig')
        OPERATOR_NS = "${DOMAIN_NAME}-operator-ns-${RUN_SUFFIX}"
        OPERATOR_SA = 'default'
        OPERATOR_HELM_RELEASE = "op-${RUN_SUFFIX}"
        DOMAIN_NAME = Common.getDomainName("${PRODUCT}")
        DOMAIN_NS = "${DOMAIN_NAME}-domain-ns-${RUN_SUFFIX}"
        WEBLOGIC_USER = 'weblogic'
        ADMIN_PASSWORD = 'Welcome1'
        FMWK8S_NFS_HOME = "/scratch/u01/DockerVolume"
        NFS_DOMAIN_DIR = "${DOMAIN_NS}"
        NFS_DOMAIN_PATH = "${FMWK8S_NFS_HOME}/${NFS_DOMAIN_DIR}"
    }


    stages {
        stage('build and deploy soa operator') {
            steps {
                log('INFO', 'Starting SOA pipeline with unique runId ' + "${RUN_SUFFIX}")

                withCredentials([[$class          : 'UsernamePasswordMultiBinding', credentialsId: 'DockerHub',
                                  usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'],
                                 [$class          : 'UsernamePasswordMultiBinding', credentialsId: 'sandeep.zachariah.docker',
                                  usernameVariable: 'DOCKER_USERNAME_CISYSTEM', passwordVariable: 'DOCKER_PASSWORD_CISYSTEM']]) {
                    container('dind') {
                        git branch: 'master',
                                credentialsId: 'sandeep.zachariah.ssh',
                                url: 'git@orahub.oraclecorp.com:tooling/soa-kubernetes-operator.git'

                        script {
                            try {
                                sh label: 'create operator namespace', script: '''
                                export KUBECONFIG=${KUBECONFIG}
                                kubectl create ns ${OPERATOR_NS}
                                #kubectl create sa ${OPERATOR_SA} -n ${OPERATOR_NS}
                                '''
                            }
                            catch (exc) {
                            }
                        }

                        script {
                            try {
                                sh label: 'create domain namespace', script: '''
                                export KUBECONFIG=${KUBECONFIG}
                                kubectl create ns ${DOMAIN_NS}
                                '''
                            }
                            catch (exc) {
                            }
                            finally {
                                sh label: 'initialize helm', script: '''
                                export KUBECONFIG=${KUBECONFIG}
                                helm init
                                '''
                            }
                        }

                        sh label: 'build soa operator image', script: '''
                        docker login http://container-registry.oracle.com -u ${DOCKER_USERNAME_CISYSTEM} -p ${DOCKER_PASSWORD_CISYSTEM}

						docker pull container-registry.oracle.com/java/serverjre:latest
						docker tag container-registry.oracle.com/java/serverjre:latest store/oracle/serverjre:8

						docker pull fmw-cert-docker.dockerhub-den.oraclecorp.com/soaoperatorpoc/weblogic-kubernetes-operator:2.1
						docker tag fmw-cert-docker.dockerhub-den.oraclecorp.com/soaoperatorpoc/weblogic-kubernetes-operator:2.1 weblogic-kubernetes-operator:2.1


						docker build --build-arg https_proxy=$https_proxy -t soa-kubernetes-operator:2.1 --no-cache=true .
						'''

                        sh label: 'push soa operator image', script: '''
						docker tag soa-kubernetes-operator:2.1 cisystem.docker.oraclecorp.com/soa-kubernetes-operator:2.1
						docker login cisystem.docker.oraclecorp.com -u ${DOCKER_USERNAME_CISYSTEM} -p ${DOCKER_PASSWORD_CISYSTEM}
						docker push cisystem.docker.oraclecorp.com/soa-kubernetes-operator:2.1
                        '''

                        sh label: 'deploy soa operator', script: '''
						retVal=`echo \\`helm ls ${OPERATOR_HELM_RELEASE}\\``

						if [[ !  -z  "$retVal" ]]; then
						    helm upgrade \
						        --reuse-values \
						        --set "domainNamespaces={$DOMAIN_NS}" \
						        --wait \
						        ${OPERATOR_HELM_RELEASE} \
						        kubernetes/charts/soa-kubernetes-operator
						else
							helm install kubernetes/charts/soa-kubernetes-operator \
								--name ${OPERATOR_HELM_RELEASE} \
								--set image=cisystem.docker.oraclecorp.com/soa-kubernetes-operator:2.1 \
								--namespace ${OPERATOR_NS} \
								--set serviceAccount=${OPERATOR_SA} \
								--set "domainNamespaces={}" \
								--wait
						fi
						'''

                        sh label: 'verify soa operator', script: '''
						kubectl get pods -n ${OPERATOR_NS}
						#kubectl logs -n ${OPERATOR_NS} -c weblogic-operator deployments/weblogic-operator
						'''
                    }

                    container('jnlp') {
                        git branch: 'master',
                                credentialsId: 'sandeep.zachariah.ssh',
                                url: 'git@orahub.oraclecorp.com:fmw-platform-qa/fmw-k8s-pipeline.git'

                        sh label: 'create nfs folder', script: '''
                        export KUBECONFIG=${KUBECONFIG}

                        cd kubernetes/framework
                        sed -i "s#%FMWK8S_NFS_HOME%#${FMWK8S_NFS_HOME}#g" fmwk8s-mkdir-pod.yaml
                        sed -i "s#%NFS_DOMAIN_DIR%#${NFS_DOMAIN_DIR}#g" fmwk8s-mkdir-pod.yaml
                        cat fmwk8s-mkdir-pod.yaml

                        kubectl apply -f fmwk8s-mkdir-pod.yaml -n ${DOMAIN_NS}
                        '''
                    }
                }
            }
        }

        stage('prepare soa environment') {
            parallel {
                stage('setup database') {
                    steps {
                        withCredentials([[$class          : 'UsernamePasswordMultiBinding', credentialsId: 'DockerHub',
                                          usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'],
                                         [$class          : 'UsernamePasswordMultiBinding', credentialsId: 'sandeep.zachariah.docker',
                                          usernameVariable: 'DOCKER_USERNAME_CISYSTEM', passwordVariable: 'DOCKER_PASSWORD_CISYSTEM']]) {
                            container('jnlp') {
                                git branch: 'master',
                                        credentialsId: 'sandeep.zachariah.ssh',
                                        url: 'git@orahub.oraclecorp.com:tooling/soa-kubernetes-operator.git'

                                sh label: 'setup env', script: '''
                                export KUBECONFIG=${KUBECONFIG}
                                '''

                                sh label: 'setup db', script: '''
                                retVal=`echo \\`kubectl get secret regcred -n ${DOMAIN_NS} 2>&1\\``
                                if echo "$retVal" | grep -q "not found"; then
                                    kubectl create secret docker-registry regcred -n ${DOMAIN_NS} --docker-server=http://container-registry.oracle.com \
                                    --docker-username=${DOCKER_USERNAME_CISYSTEM} --docker-password=${DOCKER_PASSWORD_CISYSTEM} --docker-email=${DOCKER_USERNAME_CISYSTEM}
                                fi

                                cd kubernetes/samples/scripts/create-soa-domain/domain-home-on-pv/multiple-Managed-servers
                                cp soadb.yaml soadb.yaml.orig

						        sed -i "s#image: oracle/database:12.2.0.1#image: container-registry.oracle.com/database/enterprise:12.2.0.1-slim#g" soadb.yaml
						        sed -i "s#namespace: soans#namespace: ${DOMAIN_NS}#g" soadb.yaml
						        sed -i "s#terminationGracePeriodSeconds: 30#terminationGracePeriodSeconds: 30\\n      imagePullSecrets:\\n      - name: regcred#g" soadb.yaml
						        cat soadb.yaml

						        kubectl apply -f soadb.yaml

						        dbstat='dbstat'
						        i=0
						        until `echo $dbstat | grep -q Running` > /dev/null
						        do
						            if [ $i == 25 ]; then
						                echo "Timeout waiting for DB. Exiting!!."
						                exit 1
						            fi
						            i=$((i+1))
						            echo "DB is not Running. Iteration $i of 25. Sleeping"
						            sleep 60
						            dbstat=`echo \\`kubectl get pods -n ${DOMAIN_NS} 2>&1 | grep soadb\\``
						        done
						        echo "DB container is Running."
						        sleep 300

                                kubectl get pods,svc -n ${DOMAIN_NS} | grep soadb
						        #kubectl logs soadb-0 -n ${DOMAIN_NS}
                                '''
                            }
                        }
                    }
                }

                stage('prepare soa domain in pv') {
                    steps {
                        withCredentials([[$class          : 'UsernamePasswordMultiBinding', credentialsId: 'DockerHub',
                                          usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'],
                                         [$class          : 'UsernamePasswordMultiBinding', credentialsId: 'sandeep.zachariah.docker',
                                          usernameVariable: 'DOCKER_USERNAME_CISYSTEM', passwordVariable: 'DOCKER_PASSWORD_CISYSTEM']]) {
                            container('jnlp') {
                                sh label: 'setup env', script: '''
                                export KUBECONFIG=${KUBECONFIG}
                                sleep 120
                                '''

                                sh label: 'upgrade helm', script: '''
                                helm upgrade \
                                    --reuse-values \
                                    --set "domainNamespaces={$DOMAIN_NS}" \
                                    --wait \
                                    ${OPERATOR_HELM_RELEASE} \
                                    kubernetes/charts/soa-kubernetes-operator
                                '''


                                sh label: 'configure domain secrets', script: '''
                                retVal=`echo \\`kubectl get secret ${DOMAIN_NAME}-weblogic-credentials -n ${DOMAIN_NS} 2>&1\\``
                                if echo "$retVal" | grep -q "not found"; then
                                    kubernetes/samples/scripts/create-soa-domain-credentials/create-domain-credentials.sh -u ${WEBLOGIC_USER} -p ${ADMIN_PASSWORD} -n ${DOMAIN_NS} -d ${DOMAIN_NAME}
                                fi
                                '''

                                sh label: 'prepare persistent volume', script: '''
                                cd kubernetes/samples/scripts/create-soa-domain-pv-pvc
                                cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig

						        sed -i "s#baseName: domain#baseName: ${DOMAIN_NS}#g" create-pv-pvc-inputs.yaml
						        sed -i "s#domainUID: soainfra#domainUID: ${DOMAIN_NAME}#g" create-pv-pvc-inputs.yaml
						        sed -i "s#namespace: soans#namespace: ${DOMAIN_NS}#g" create-pv-pvc-inputs.yaml
						        sed -i "s#weblogicDomainStoragePath: /scratch/DockerVolume/SOA#weblogicDomainStoragePath: ${NFS_DOMAIN_PATH}#g" create-pv-pvc-inputs.yaml
						        sed -i "s#weblogicDomainStorageReclaimPolicy: Retain#weblogicDomainStorageReclaimPolicy: Recycle#g" create-pv-pvc-inputs.yaml
                                cat create-pv-pvc-inputs.yaml

                                ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o ${WORKSPACE}/soa-operator-output-directory

                                cp ${WORKSPACE}/soa-operator-output-directory/pv-pvcs/${DOMAIN_NAME}-${DOMAIN_NS}-pv.yaml ${WORKSPACE}
						        cp ${WORKSPACE}/soa-operator-output-directory/pv-pvcs/${DOMAIN_NAME}-${DOMAIN_NS}-pvc.yaml ${WORKSPACE}
                                cat ${WORKSPACE}/${DOMAIN_NAME}-${DOMAIN_NS}-pv.yaml
						        cat ${WORKSPACE}/${DOMAIN_NAME}-${DOMAIN_NS}-pvc.yaml

                                kubectl apply -f ${WORKSPACE}/${DOMAIN_NAME}-${DOMAIN_NS}-pv.yaml -n ${DOMAIN_NS}
						        kubectl apply -f ${WORKSPACE}/${DOMAIN_NAME}-${DOMAIN_NS}-pvc.yaml -n ${DOMAIN_NS}

                                kubectl describe pv ${DOMAIN_NAME}-${DOMAIN_NS}-pv -n ${DOMAIN_NS}
                                kubectl describe pvc ${DOMAIN_NAME}-${DOMAIN_NS}-pvc -n ${DOMAIN_NS}
                                '''

                                sh label: 'prepare domain in pv', script: '''
                                cd kubernetes/samples/scripts/create-soa-domain/domain-home-on-pv/multiple-Managed-servers
                                cp create-domain-inputs.yaml create-domain-inputs.yaml.orig
                                cp create-domain-job-template.yaml create-domain-job-template.yaml.orig

                                #sed -i "s#serverStartPolicy: IF_NEEDED#serverStartPolicy: ADMIN_ONLY#g" create-domain-inputs.yaml
                                sed -i "s#domainUID: soainfra#domainUID: ${DOMAIN_NAME}#g" create-domain-inputs.yaml
                                sed -i "s#domainHome: /u01/oracle/user_projects/domains/soainfra#domainHome: /u01/oracle/user_projects/domains/${DOMAIN_NAME}#g" create-domain-inputs.yaml
                                sed -i "s#weblogicCredentialsSecretName: soainfra-domain-credentials#weblogicCredentialsSecretName: ${DOMAIN_NAME}-weblogic-credentials#g" create-domain-inputs.yaml
                                sed -i "s#image: oracle/soa:12.2.1.3#image: container-registry.oracle.com/middleware/soasuite:12.2.1.3#g" create-domain-inputs.yaml
                                sed -i "s/#imagePullSecretName:/imagePullSecretName: regcred/g" create-domain-inputs.yaml
                                sed -i "s#logHome: /u01/oracle/user_projects/domains/logs/soainfra#logHome: /u01/oracle/user_projects/domains/logs/${DOMAIN_NAME}#g" create-domain-inputs.yaml
                                #sed -i "s#exposeAdminT3Channel: false#exposeAdminT3Channel: true#g" create-domain-inputs.yaml
                                #sed -i "s/#t3PublicAddress:/t3PublicAddress: fmwk8s.us.oracle.com/g" create-domain-inputs.yaml
                                sed -i "s#namespace: soans#namespace: ${DOMAIN_NS}#g" create-domain-inputs.yaml
                                sed -i "s#persistentVolumeClaimName: soainfra-domain-pvc#persistentVolumeClaimName: ${DOMAIN_NAME}-${DOMAIN_NS}-pvc#g" create-domain-inputs.yaml
                                sed -i "s#initialManagedServerReplicas: 2#initialManagedServerReplicas: 1#g" create-domain-inputs.yaml
                                cat create-domain-inputs.yaml

                                sed -i "s#soadb:1521#soadb.${DOMAIN_NS}:1521#g" create-domain-job-template.yaml
                                cat create-domain-job-template.yaml
                                '''
                            }
                        }
                    }
                }
            }
        }

        stage('deploy soa domain') {
            steps {
                sh label: 'create domain in pv', script: '''
                cd kubernetes/samples/scripts/create-soa-domain/domain-home-on-pv/multiple-Managed-servers
                ./create-domain.sh -i create-domain-inputs.yaml -o ${WORKSPACE}/soa-operator-output-directory

                cp ${WORKSPACE}/soa-operator-output-directory/soa-domains/${DOMAIN_NAME}/domain.yaml ${WORKSPACE}
                cat ${WORKSPACE}/domain.yaml
                '''

                sh label: 'start domain', script: '''
                kubectl apply -f ${WORKSPACE}/domain.yaml
                sleep 360

                kubectl get all,domains -n ${DOMAIN_NS}
                #kubectl logs ${DOMAIN_NAME}-adminserver -n ${DOMAIN_NS}
                '''
            }
        }

        stage('deploy test tools') {
            steps {
                sh label: 'setup env', script: '''
                '''

                sh label: 'deploy selenium', script: '''
                '''
            }
        }

        stage('run tests') {
            parallel {
                stage('verify soa ready') {
                    steps {
                        container('jnlp') {
                            sh label: 'verify weblogic ready', script: '''
                            curl -v "http://${DOMAIN_NAME}-adminserver.${DOMAIN_NS}.svc.cluster.local:7001/weblogic/ready"
                            #curl -v "http://${DOMAIN_NAME}-cluster-cluster-1.${DOMAIN_NS}.svc.cluster.local:8001/weblogic/ready"
                            curl -v "http://${DOMAIN_NAME}-cluster-soa-cluster.${DOMAIN_NS}.svc.cluster.local:8001/weblogic/ready"
                            '''
                        }
                    }
                }

                stage('wait for completion') {
                    steps {
                        container('jnlp') {
                            script {
                                EnvironmentSetup.waitHoursAfter(this, "true")
                            }
                        }
                    }
                }

                stage('execute tests') {
                    steps {
                        container('jnlp') {
                            git branch: 'master',
                                    credentialsId: 'sandeep.zachariah.ssh',
                                    url: 'git@orahub.oraclecorp.com:fmw-platform-qa/fmw-k8s-operator-intg-tests.git'

                            sh label: 'prepare properties file', script: '''
                            cd config
                            sed -i "s|\${PRODUCT_NAME}|${PRODUCT}|g" operatorTest.properties
                            sed -i "s|\${OPERATOR_NS}|${OPERATOR_NS}|g" operatorTest.properties
                            sed -i "s|\${OPERATOR_SA}|${OPERATOR_SA}|g" operatorTest.properties
                            sed -i "s|\${DOMAIN_NAME}|${DOMAIN_NAME}|g" operatorTest.properties
                            sed -i "s|\${DOMAIN_NS}|${DOMAIN_NS}|g" operatorTest.properties
                            sed -i "s|\${CLUSTER_NAME}|${PRODUCT}_cluster|g" operatorTest.properties
                            sed -i "s|\${MANAGED_SERVER_NAME_BASE}|${PRODUCT}_server|g" operatorTest.properties
                            sed -i "s|\${ADMIN_SERVER_NAME}|admin-server|g" operatorTest.properties
                            sed -i "s|\${WEBLOGIC_CREDENTIALS_SECRET_NAME}|${DOMAIN_NAME}-weblogic-credentials|g" operatorTest.properties
                            cat operatorTest.properties
                            '''


                            sh label: 'run test', script: '''
                            echo "Maven command:"
                            echo "mvn clean verify -P ${MAVEN_PROFILE} -DoperatorTest.properties=config/operatorTest.properties -DproxySet=true -DproxyHost=www-proxy.us.oracle.com -DproxyPort=80"
                            mvn clean verify -P ${MAVEN_PROFILE} -DoperatorTest.properties=config/operatorTest.properties -DproxySet=true -DproxyHost=www-proxy.us.oracle.com -DproxyPort=80
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            container(name: 'jnlp') {
                script {
                    Operator.cleanOperator this, "${OPERATOR_HELM_RELEASE}"

                    Domain.cleanDomain this, "${DOMAIN_NAME}", "${DOMAIN_NS}"
                    Operator.cleanOperator this, "${OPERATOR_HELM_RELEASE}"

					EnvironmentSetup.deleteNfsFolder(this, "${DOMAIN_NS}", "${FMWK8S_NFS_HOME}", "${NFS_DOMAIN_DIR}")

                    Operator.cleanOperatorNamespace this, "${OPERATOR_NS}"
					Domain.cleanDomainNamespace this, "${DOMAIN_NS}"
                }
            }
        }
    }
}