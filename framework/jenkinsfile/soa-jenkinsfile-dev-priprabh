@Library('fmwk8s-pipeline-library') _


import com.oracle.fmwk8s.common.Common
import com.oracle.fmwk8s.common.EnvironmentSetup
import com.oracle.fmwk8s.env.Database
import com.oracle.fmwk8s.env.Domain
import com.oracle.fmwk8s.env.Operator

pipeline {
    agent {
        kubernetes {
            label 'fmwk8s-test-mats-slave-pp'
            namespace 'fmwk8s'
            inheritFrom 'fmwk8s-test-mats-slave-pp'
        }
    }

    environment {
        RUN_SUFFIX = Common.getUniqueId(this)
        KUBECONFIG = credentials('admin.fmwk8s.v10.kubeconfig')
        SOA_OPERATOR_NS = 'soa-operator-ns' + "-${RUN_SUFFIX}"
        SOA_OPERATOR_SA = 'default'
        SOA_OPERATOR_REL = "${RUN_SUFFIX}"
        SOA_DOMAIN_NAME = 'soainfra'
        SOA_DOMAIN_NS = 'soa-domain-ns' + "-${RUN_SUFFIX}"
        FMWK8S_NFS_HOME = "/scratch/u01/DockerVolume"
        NFS_DOMAIN_DIR = "${SOA_DOMAIN_NS}"
        NFS_DOMAIN_PATH = "${FMWK8S_NFS_HOME}/${NFS_DOMAIN_DIR}"
        REGISTRY_AUTH = credentials("sandeep.zachariah.docker")
    }


    stages {
        stage('build and deploy soa operator') {
            steps {
                log('INFO', 'Starting soa pipeline with unique runId ' + "${RUN_SUFFIX}")
                container('dind') {
                    git branch: 'master',
                            credentialsId: 'sandeep.zachariah.ssh',
                            url: 'git@orahub.oraclecorp.com:tooling/soa-kubernetes-operator.git'
                    script {
                        Operator.createNamespace this, "${SOA_OPERATOR_NS}"
                        Domain.createNamespace this, "${SOA_DOMAIN_NS}"
                        Operator.buildOperator this, "${REGISTRY_AUTH_USR}", "${REGISTRY_AUTH_PSW}", "${https_proxy}"
                        Operator.deployOperator this, "${SOA_OPERATOR_REL}", "${SOA_DOMAIN_NS}", "${SOA_OPERATOR_NS}", "${SOA_OPERATOR_SA}"
                        Operator.verifyOperator this, "${SOA_OPERATOR_NS}"
                    }
                }
                container('jnlp') {
                    script {
                        EnvironmentSetup.createNfsFolder this, "${SOA_DOMAIN_NS}", "${FMWK8S_NFS_HOME}", "${NFS_DOMAIN_DIR}"
                    }
                }
            }
        }

        stage('prepare soa environment') {
            parallel {
                stage('setup database') {
                    steps {
                        container('jnlp') {
                            script {
                                Database.deployDatabase this, "${SOA_DOMAIN_NS}", "${REGISTRY_AUTH_USR}", "${REGISTRY_AUTH_PSW}"
                            }
                        }
                    }
                }
                stage('prepare soa domain in pv') {
                    steps {
                        container('jnlp') {
                            script {
                                Operator.setDomainNamespace this, "${SOA_DOMAIN_NS}", "${SOA_OPERATOR_REL}"
                                Domain.configureDomainSecret this, "${SOA_DOMAIN_NAME}", "${SOA_DOMAIN_NS}"
                                Domain.preparePersistentVolume this, "${SOA_DOMAIN_NAME}", "${SOA_DOMAIN_NS}"
                                Domain.prepareDomain this, "${SOA_DOMAIN_NAME}", "${SOA_DOMAIN_NS}"
                            }
                        }
                    }

                }
            }
        }
        stage('deploy soa domain') {
            steps {
                script {
                    Domain.createDomain this, "${SOA_DOMAIN_NAME}", "${SOA_DOMAIN_NS}"
                    Domain.isDomainReady this, "${SOA_DOMAIN_NAME}", "${SOA_DOMAIN_NS}"
                }
            }
        }

    }

    post {
        always {
            container(name: 'jnlp') {
                script {
                    Operator.cleanOperator this, "${SOA_OPERATOR_REL}"

                    Domain.cleanDomain this, "${SOA_DOMAIN_NAME}", "${SOA_DOMAIN_NS}"
                    Domain.cleanDomainNamespace this, "${SOA_DOMAIN_NS}"

                    Operator.cleanOperator this, "${SOA_OPERATOR_REL}"
                    Operator.cleanOperatorNamespace this, "${SOA_OPERATOR_NS}"
                }
            }
        }
    }
}
