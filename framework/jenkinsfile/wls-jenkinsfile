@Library('fmwk8s-pipeline-library') _


import com.oracle.fmwk8s.common.Common
import com.oracle.fmwk8s.env.Domain
import com.oracle.fmwk8s.env.Operator

pipeline {
    agent {
        kubernetes {
            label 'fmwk8s-test-mats-slave'
            namespace 'fmwk8s'
            inheritFrom 'fmwk8s-test-mats-slave'
        }
    }
    environment {
        RUN_SUFFIX = Common.getUniqueId(this)
        KUBECONFIG = credentials('admin.fmwk8s.kubeconfig')
        WLS_OPERATOR_NS = 'wls-operator-ns' + "-${RUN_SUFFIX}"
        WLS_OPERATOR_REL = "${RUN_SUFFIX}"
        WLS_DOMAIN_NAME = 'wlsdomain'
        WLS_DOMAIN_NS = 'wls-domain-ns' + "-${RUN_SUFFIX}"
    }
    stages {
        stage('deploy weblogic operator') {
            steps {
                container('jnlp') {
                    git branch: 'release/2.1',
                            url: 'https://github.com/oracle/weblogic-kubernetes-operator'

                    sh 'export KUBECONFIG=${KUBECONFIG}'

                    sh label: 'init helm', script: '''
                    helm init
                    kubectl create ns ${WLS_OPERATOR_NS}
                    kubectl create ns ${WLS_DOMAIN_NS}
                    '''

                    sh label: 'deploy operator', script: '''
                    retVal=`echo \\`helm ls ${WLS_OPERATOR_REL}\\``

                    if [[ !  -z  "$retVal" ]]; then
                        helm upgrade \
                            --reuse-values \
                            --set "domainNamespaces={$WLS_DOMAIN_NS}" \
                            --wait \
                            ${WLS_OPERATOR_REL} \
                            kubernetes/charts/weblogic-operator
                    else
                        helm install kubernetes/charts/weblogic-operator \
                            --name ${WLS_OPERATOR_REL} \
                            --namespace ${WLS_OPERATOR_NS} \
                            --set serviceAccount=default \
                            --set "domainNamespaces={}" \
                            --wait
                    fi
                    '''

                    sh label: 'verify operator', script: '''
                    kubectl get pods -n ${WLS_OPERATOR_NS}
                    '''
                }
            }
        }

        stage('deploy weblogic domain') {
            steps {
                withCredentials([[$class          : 'UsernamePasswordMultiBinding', credentialsId: 'sczachar.dockerhub',
                                  usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'],
                                 [$class          : 'UsernamePasswordMultiBinding', credentialsId: 'sandeep.zachariah.docker',
                                  usernameVariable: 'DOCKER_USERNAME_CISYSTEM', passwordVariable: 'DOCKER_PASSWORD_CISYSTEM']]) {
                    container('dind') {
                        git branch: 'release/2.1',
                                url: 'https://github.com/oracle/weblogic-kubernetes-operator'

                        sh label: 'setup env', script: '''
                        export KUBECONFIG=${KUBECONFIG}
                        '''

                        sh label: 'upgrade helm', script: '''
                        helm upgrade \
                            --reuse-values \
                            --set "domainNamespaces={$WLS_DOMAIN_NS}" \
                            --wait \
                            ${WLS_OPERATOR_REL} \
                            kubernetes/charts/weblogic-operator
                        '''

                        sh label: 'set domain secret', script: '''
                         retVal=`echo \\`kubectl get secret $WLS_DOMAIN_NAME-weblogic-credentials -n $WLS_DOMAIN_NS 2>&1\\``
                         if echo "$retVal" | grep -q "not found"; then
                            kubernetes/samples/scripts/create-weblogic-domain-credentials/create-weblogic-credentials.sh -u weblogic -p welcome1 -n $WLS_DOMAIN_NS -d $WLS_DOMAIN_NAME
                         fi
                        '''

                        sh label: 'prepare domain files', script: '''
                        cd kubernetes/samples/scripts/create-weblogic-domain/domain-home-in-image                  
                        cp create-domain-inputs.yaml create-domain-inputs.yaml.orig
                        cat create-domain-inputs.yaml

                        sed -i "s#domainUID: domain1#domainUID: $WLS_DOMAIN_NAME#g" create-domain-inputs.yaml                  
                        sed -i "s#namespace: default#namespace: $WLS_DOMAIN_NS#g" create-domain-inputs.yaml
                        sed -i "s#weblogicCredentialsSecretName: domain1-weblogic-credentials#weblogicCredentialsSecretName: $WLS_DOMAIN_NAME-weblogic-credentials#g" create-domain-inputs.yaml
                        sed -i "s#exposeAdminT3Channel: false#exposeAdminT3Channel: true#g" create-domain-inputs.yaml
                        '''

                        sh label: 'create domain', script: '''
                        docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        cd kubernetes/samples/scripts/create-weblogic-domain/domain-home-in-image
                        ./create-domain.sh -u weblogic -p welcome1 -i create-domain-inputs.yaml -o ${WORKSPACE}/weblogic-operator-output-directory

                        cp ${WORKSPACE}/weblogic-operator-output-directory/weblogic-domains/${WLS_DOMAIN_NAME}/domain.yaml ${WORKSPACE}
                    
                        docker images
                        docker tag domain-home-in-image:12.2.1.3 cisystem.docker.oraclecorp.com/domain-home-in-image:$WLS_DOMAIN_NAME
                        docker login cisystem.docker.oraclecorp.com -u ${DOCKER_USERNAME_CISYSTEM} -p ${DOCKER_PASSWORD_CISYSTEM}
                        docker push cisystem.docker.oraclecorp.com/domain-home-in-image:$WLS_DOMAIN_NAME
                        
                        sed -i "s#domain-home-in-image:12.2.1.3#cisystem.docker.oraclecorp.com/domain-home-in-image:${WLS_DOMAIN_NAME}#g" ${WORKSPACE}/domain.yaml
                        sed -i "s#weblogic.oracle/v3#weblogic.oracle/v3alpha1#g" ${WORKSPACE}/domain.yaml
                        cat ${WORKSPACE}/domain.yaml
                        kubectl apply -n $WLS_DOMAIN_NS -f ${WORKSPACE}/domain.yaml
                        
                        kubectl get pods -n $WLS_DOMAIN_NS
                        kubectl get services -n $WLS_DOMAIN_NS
                        '''

                        sh label: 'expose weblogic to lb', script: '''
                        helm upgrade \
                            --reuse-values \
                            --set "kubernetes.namespaces={traefik,$WLS_DOMAIN_NS}" \
                            --wait \
                            traefik-ingress-controller \
                            stable/traefik
                        
                        helm install kubernetes/samples/charts/ingress-per-domain \
                            --name ${WLS_DOMAIN_NAME}-ingress \
                            --namespace ${WLS_DOMAIN_NS} \
                            --set wlsDomain.domainUID=${WLS_DOMAIN_NAME} \
                            --set traefik.hostname=fmwk8s.us.oracle.com
                            
                        tail -f /dev/null
                        '''
                    }
                }
            }
        }

        stage('deploy tools') {
            steps {
                container(name: 'jnlp') {
                    git branch: 'master',
                            credentialsId: 'sandeep.zachariah.ssh',
                            url: 'git@orahub.oraclecorp.com:fmw-platform-qa/fmw-k8s-pipeline.git'

                    sh 'kubectl apply -n fmwk8s -f kubernetes/tools/selenium/'

                    sh label: 'generate test props', script: '''
                    cat <<EOF > ${WORKSPACE}/test.props
SELENIUM_HUB_HOST=selenium-standalone-firefox.fmwk8s
SELENIUM_HUB_PORT=4444
WLS_ADMIN_SERVER_HOST=$WLS_DOMAIN_NAME-admin-server.$WLS_DOMAIN_NAME
WLS_ADMIN_SERVER_PORT=7001
WLS_CLUSTER_HOST=$WLS_DOMAIN_NAME-cluster-cluster-1.$WLS_DOMAIN_NAME
WLS_CLUSTER_PORT=8001
WLS_ADMIN_USERNAME=weblogic
WLS_ADMIN_PASSWORD=welcome1
EOF
                    
                    cat ${WORKSPACE}/test.props
                    '''
                }
            }
        }

        stage('execute tests') {
            parallel {
                stage('verify weblogic ready') {
                    steps {
                        container('jnlp') {
                            sh label: 'verify weblogic ready', script: '''
                            sleep 300
                    
                            curl -v "http://${WLS_DOMAIN_NAME}-admin-server.${WLS_DOMAIN_NS}.svc.cluster.local:7001/weblogic/ready"
                            curl -v "http://${WLS_DOMAIN_NAME}-cluster-cluster-1.${WLS_DOMAIN_NS}.svc.cluster.local:8001/weblogic/ready"
                            '''
                        }
                    }
                }

                stage('build and run maven test') {
                    steps {
                        container('jnlp') {
                            git branch: 'master',
                                    credentialsId: 'sandeep.zachariah.ssh',
                                    url: 'git@orahub.oraclecorp.com:fmw-platform-qa/fmw-k8s-wlstests.git'

                            sh label: 'execute tests', script: '''
                            sleep 120
                            #mvn clean test -Dtest.properties=${WORKSPACE}/test.props
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            container(name: 'jnlp') {
                script {
                    Operator.cleanOperator this, "${WLS_OPERATOR_REL}"

                    Domain.cleanDomain this, "${WLS_DOMAIN_NAME}", "${WLS_DOMAIN_NS}"
                    Domain.cleanDomainNamespace this, "${WLS_DOMAIN_NS}"

                    Operator.cleanOperator this, "${WLS_OPERATOR_REL}"
                    Operator.cleanOperatorNamespace this, "${WLS_OPERATOR_NS}"
                }
            }
        }
    }
}
