---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fmwk8s-utility-configmap
data:
  run-timer.sh: |-
    #!/bin/bash

    touch ${LOG_DIRECTORY}/fmwk8s.completed

    echo "Retaining Environment for ${HOURS_AFTER_SECONDS} seconds..."
    sleep ${HOURS_AFTER_SECONDS}

  web.xml: |-
    <?xml version = '1.0' encoding = 'US-ASCII'?>
    <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
             version="2.5" xmlns="http://java.sun.com/xml/ns/javaee">
      <context-param>
        <param-name>javax.faces.PROJECT_STAGE</param-name>
        <param-value>SystemTest</param-value>
      </context-param>
      <context-param>
        <param-name>oracle.adf.view.rich.automation.ENABLED</param-name>
        <param-value>true</param-value>
      </context-param>
    </web-app>

  customize-domain.sh: |-
    #!/bin/sh

    if [ "${PRODUCT_ID}" == "wcp" ]
    then
      echo "copying web.xml to enable rich automation for wcp..."
      cp -Lr /etc/config/web.xml ${FMWK8S_NFS_HOME}/domains/applications/extend.spaces.webapp.war/WEB-INF/
      ls -ltr ${FMWK8S_NFS_HOME}/domains/applications/extend.spaces.webapp.war/WEB-INF

      echo "updating em.war web.xml to enable rich automation for wcp..."
      em=`find ${FMWK8S_NFS_HOME}/domains -name em.ear`
      echo "em.ear path : $em"
      mv $em /tmp
      cd /tmp
      unzip em.ear
      unzip em.war
      sed -i 's/<!-- AUTOMATION_MODE_UNCOMMENT//g' WEB-INF/web.xml
      sed -i 's/AUTOMATION_MODE_UNCOMMENT -->//g' WEB-INF/web.xml
      zip -u em.war WEB-INF/web.xml
      zip -u em.ear em.war
      cp -rf em.ear $em
      chmod -R 777 $em
      ls -ltr $em
    fi

    if [ "${PRODUCT_ID}" == "wcsites" ]
    then
      echo "applying domain yaml to start the domain..."
      kubectl get pods -n ${DOMAIN_NS}
      kubectl apply -f /etc/domain/domain.yaml -n ${DOMAIN_NS}
      sleep 720

      echo "invoking sitesconfig setup for wcsites..."
      curl -kv http://${MANAGED_SERVER_NAME_SVC}:${MANAGED_SERVER_PORT}/sites/sitesconfig
      sleep 800
    fi

    if [ "${PRODUCT_ID}" == "soa" ] && [[ "${DOMAIN_TYPE}" == *"osb"* ]]
    then
      echo "creating config overrides for the domain..."
      mkdir fmwk8sconfigoverride

      cat <<EOF > fmwk8sconfigoverride/version.txt
    2.0
    EOF

      cat <<EOF > fmwk8sconfigoverride/config.xml
    <?xml version='1.0' encoding='UTF-8'?>
    <d:domain xmlns:d="http://xmlns.oracle.com/weblogic/domain"
    xmlns:f="http://xmlns.oracle.com/weblogic/domain-fragment"
    xmlns:s="http://xmlns.oracle.com/weblogic/situational-config">
    <d:cluster>
    <d:name>${OSB_CLUSTER_NAME}</d:name>
    <d:cluster-address f:combine-mode="add">${OSB_SERVER_NAME_SVC}:${OSB_SERVER_PORT}</d:cluster-address>
    </d:cluster>
    </d:domain>
    EOF

      cat fmwk8sconfigoverride/config.xml

      echo "creating config overrides config map for the domain..."
      kubectl create cm fmwk8s-overrides-config-map -n ${DOMAIN_NS} --from-file ./fmwk8sconfigoverride
      kubectl label cm fmwk8s-overrides-config-map -n ${DOMAIN_NS} weblogic.domainUID=${DOMAIN_NAME}
      kubectl get cm fmwk8s-overrides-config-map -n ${DOMAIN_NS} -o yaml
    fi
---
